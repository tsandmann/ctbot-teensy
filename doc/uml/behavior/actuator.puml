@startuml actuator

namespace ctbot {
    class Actuator <template <typename T, T min = std::numeric_limits<T>::min(), T max = std::numeric_limits<T>::max()>> {
        +{static} Ptr = std::unique_ptr<Actuator>
        +add_value(const T& x, const uint16_t prio, std::function<void(constActuator&,bool)> callback) : bool
        +commit_value() : void
        #value_map_ : std::map<uint16_t, std::tuple<T, std::function<void{const Actuator&, bool}>>>
    }

    class ActuatorContainer <template <class T>> {
        +{static} Ptr = std::unique_ptr<ActuatorContainer>
        +commit_values() : void
        +create_actuator(const char* name, bool active, Args&&... args) : T*
    }

    Resource <|-- Actuator
    ResourceContainer <|-- ActuatorContainer
}

@enduml
